//
// This is AF agent schema database using the mysql database
//

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//
// Prisma database schema for the AI agent

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

//User Model
model User {
    id   Int      @id @default(autoincrement())
    user_name     String?
    @@unique([user_name])
}

// Generated Images
model generated_images {
    id                        String  @id @default(cuid())
    userId                    String
    project_title             String
    prompt                    String
    image_url                 String
    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
    user                      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// session Model
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// survey Model
model survey {
    id                          String  @id @default(cuid())
    userId                      String
    project_title               String
    level_of_statisfaction      String
    direct_digital_fabrication  String
    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
    user                   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// variation Model
model variation {
    id                          String  @id @default(cuid())
    userId                      String
    project_title               String
    image_url                   String
    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
    user                   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Modification Model
model Modification {
    id                          String  @id @default(cuid())
    userId                      String
    project_title               String
    guidance_scale              String
    prompt                      String
    negative_prompt             String
    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
    user                   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}



model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}